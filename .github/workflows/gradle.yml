name: Deploy Spring App to AWS EC2

on:
  push:
    branches:
      - develop # develop 브랜치에 푸시될 때마다 실행

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions에서 사용할 환경

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # 리포지토리의 코드를 체크아웃

    - name: Build with Gradle on GitHub
      run: ./gradlew build  # Gradle로 프로젝트 빌드 (GitHub 환경에서)

    - name: Transfer JAR to EC2
      run: |
        echo "${{ secrets.AWS_SSH_KEY }}" > key.pem
        chmod 400 key.pem
        scp -i key.pem -o StrictHostKeyChecking=no build/libs/*.jar ${{ secrets.EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:/home/${{ secrets.EC2_USER }}/app.jar

    - name: SSH and Deploy to EC2
      run: |
        ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
        pkill -f 'java' || true  # 실행 중인 Spring 애플리케이션이 있으면 종료
        nohup java -jar /home/${{ secrets.EC2_USER }}/app.jar > /dev/null 2>&1 &
        EOF
    - name: Deploy to Server
      env:
        # MySQL environment variables
        TRAVVELCOME_DB_PASSWORD: ${{ secrets.TRAVVELCOME_DB_PASSWORD }}
        # OpenAI API environment variables
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_MODEL_ID: ${{ secrets.OPENAI_MODEL_ID }}
        # Kakao API environment variables
        KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
        KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
      run: |
        java -jar target/your-app.jar
